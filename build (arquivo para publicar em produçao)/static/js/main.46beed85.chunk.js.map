{"version":3,"sources":["components/Api.js","components/Home.js","components/NewSeries.js","components/Series.js","components/EditSeries.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","apis","loadGenres","get","saveSeries","newSeries","post","updateSeries","series","put","id","loadSeriesByGenre","genre","deleteSeries","delete","loadSeriesById","Home","props","state","genres","isLoading","this","setState","then","res","data","key","to","className","src","map","renderGenreLink","Component","statuses","NewSeries","redirect","bind","name","refs","value","status","comments","type","ref","Object","keys","onClick","Series","renderSeries","loadData","match","params","alt","length","EditSeries","About","App","role","href","height","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46beed85.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3001'\r\n})\r\n\r\nexport const loadGenres = () => api.get('genres')\r\nexport const saveSeries = (newSeries) => api.post('series', newSeries)\r\nexport const updateSeries = (series) => api.put('series/'+series.id, series)\r\nexport const loadSeriesByGenre = (genre) => api.get('series?genre='+genre)\r\nexport const deleteSeries = (id) => api.delete('series/'+id)\r\nexport const loadSeriesById = (id) => api.get('series/'+id)\r\n\r\n\r\nconst apis = {\r\n    loadGenres: loadGenres,\r\n    saveSeries: saveSeries,\r\n    updateSeries: updateSeries,\r\n    loadSeriesByGenre: loadSeriesByGenre,\r\n    deleteSeries: deleteSeries,\r\n    loadSeriesById: loadSeriesById,\r\n}\r\n\r\nexport default apis","import React, {Component} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport api from './Api'\r\n\r\nclass Home extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    \r\n        this.state = {\r\n          genres: [],\r\n          isLoading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        this.setState({ isLoading: true})\r\n    \r\n        api.loadGenres()\r\n        .then((res)=>{\r\n          this.setState({\r\n            isLoading: false,\r\n            genres: res.data\r\n          })\r\n        })\r\n    }\r\n    \r\n      /*GERA UM LINK NOS GENEROS*/\r\n    renderGenreLink(genre){\r\n    \r\n        return(\r\n            //passando os generos \r\n          <span key={genre}> &nbsp; <Link to={`/series/${genre}`}>{ genre }</Link> &nbsp; </span>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <section id=\"intro\" className=\"intro-section\">\r\n                    <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12\">\r\n                        <h1><img src=\"images/logo.png\" /></h1>\r\n                        <p>Nunca mais esqueça uma série que você assistiu ou que alguém lhe indicou.</p>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                </section>\r\n                <section>\r\n                    {\r\n                        this.state.isLoading &&\r\n                        <span>Aguarde, Carregando ...</span>\r\n                    }\r\n                    {\r\n                        !this.state.isLoading &&\r\n                        <div>\r\n                            Ver séries do gênero: {this.state.genres.map(this.renderGenreLink)}\r\n                        </div>\r\n                    }\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React, { Component} from 'react'\r\nimport api from './Api'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst statuses = {\r\n    'watched' : 'Assistido',\r\n    'watching':'Assistindo',\r\n    'toWatch':'Assistir'\r\n}\r\n\r\nclass NewSeries extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    \r\n        this.state = {\r\n          genres: [],\r\n          isLoading: false,\r\n          redirect: false\r\n        }\r\n\r\n        this.saveSeries = this.saveSeries.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        this.setState({ isLoading: true})\r\n    \r\n        api.loadGenres()\r\n        .then((res)=>{\r\n          this.setState({\r\n            isLoading: false,\r\n            genres: res.data\r\n          })\r\n        })\r\n    }\r\n\r\n    saveSeries(){\r\n        //construindo um objeto com os dados do formulario\r\n        const newSeries = {\r\n            name: this.refs.name.value,\r\n            status: this.refs.status.value,\r\n            genre: this.refs.genre.value,\r\n            comments:this.refs.comments.value\r\n        }\r\n\r\n        //salvando na api\r\n        api.saveSeries(newSeries)\r\n           .then((res)=>{\r\n               this.setState({\r\n                   redirect: '/series/'+this.refs.genre.value\r\n               })\r\n           })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n\r\n            <section className=\"intro-section\">\r\n                \r\n                {\r\n                    this.state.redirect &&\r\n                    <Redirect to={this.state.redirect} />\r\n                }\r\n\r\n                <h1>Nova Série</h1>\r\n\r\n                <form>\r\n                    Nome: <input type=\"text\" ref=\"name\" className=\"form-control\"/><br />\r\n                    Status: \r\n                    <select ref=\"status\">\r\n                        {Object\r\n                            .keys(statuses)\r\n                            .map( key => <option key={key} value={key}>{statuses[key]}</option> )\r\n                        }\r\n                    </select><br />\r\n                    Gênero: \r\n                    <select ref=\"genre\">\r\n                        {   this.state.genres\r\n                            .map( key => <option key={key} value={key}>{key}</option> )\r\n                        }\r\n                    </select><br />\r\n                    Comentários: <textarea  ref=\"comments\" className=\"form-control\"></textarea><br />\r\n                    <button type=\"button\" onClick={this.saveSeries}>Salvar</button>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewSeries","import React, { Component } from 'react'\r\nimport api from './Api'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst statuses = {\r\n    'watched' : 'Assistido',\r\n    'watching':'Assistindo',\r\n    'toWatch':'Assistir'\r\n}\r\n\r\nclass Series extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        //definindo o estado inicial\r\n        this.state = {\r\n            isLoading: false,\r\n            series: [],\r\n        }\r\n\r\n        //chama a função para poder usar o this fora do render\r\n        this.renderSeries = this.renderSeries.bind(this)\r\n        this.loadData = this.loadData.bind(this)\r\n    }\r\n\r\n    // depois que o componente montou na tela executa\r\n    componentDidMount(){\r\n\r\n        //funcao que recarrega \r\n        this.loadData()\r\n    }\r\n\r\n    loadData(){\r\n\r\n        this.setState({ isLoading: true })\r\n\r\n        api.loadSeriesByGenre(this.props.match.params.genre).then((res)=>{\r\n            this.setState({\r\n                isLoading: false,\r\n                series: res.data\r\n            })\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    deleteSeries(id){\r\n       api.deleteSeries(id).then((res)=> this.loadData())\r\n\r\n       \r\n    }\r\n\r\n    renderSeries(series){\r\n        return(\r\n            <div key={series.id} className=\"item  col-xs-4 col-lg-4\">\r\n                <div className=\"thumbnail\">\r\n                    <img className=\"group list-group-image\" src=\"http://placehold.it/400x250/000/fff\" alt=\"\" />\r\n                    <div className=\"caption\">\r\n                        <h4 className=\"group inner list-group-item-heading\"> {series.name} </h4>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-xs-12 col-md-12\">\r\n                                <p className=\"lead\"> {series.genre} / {statuses[series.status]} </p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-xs-12 col-md-12\">\r\n                                <Link className=\"btn btn-success\" to={'/series-edit/'+series.id} >Editar</Link>\r\n                                <a className=\"btn btn-danger\" onClick={ () => this.deleteSeries(series.id)}>Excluir</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n           <section id=\"intro\" className=\"intro-section\">\r\n               <h1>Series de {this.props.match.params.genre}</h1>\r\n               \r\n                {// aparece a mensagem enquanto carrega os dados\r\n                    this.state.isLoading &&\r\n                    <p>Carregando, aguarde...</p>\r\n                }\r\n\r\n                {\r\n                    this.state.series.length === 0 &&\r\n                    \r\n                    <div className='alert alert-info'>\r\n                        Nenhuma série cadastrada.\r\n                    </div>\r\n                }\r\n\r\n\r\n                <div id=\"series\" className=\"row list-group\">\r\n                    { //aparece os dados\r\n                        !this.state.isLoading &&\r\n                        this.state.series.map(this.renderSeries)\r\n                    }\r\n                </div>\r\n\r\n           </section>\r\n        )\r\n    }\r\n}\r\nexport default Series","import React, { Component} from 'react'\r\nimport api from './Api'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nconst statuses = {\r\n    'watched' : 'Assistido',\r\n    'watching':'Assistindo',\r\n    'toWatch':'Assistir'\r\n}\r\n\r\nclass EditSeries extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    \r\n        this.state = {\r\n          genres: [],\r\n          isLoading: false,\r\n          redirect: false,\r\n          series: {},\r\n        }\r\n\r\n        this.saveSeries = this.saveSeries.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        this.setState({ isLoading: true})\r\n    \r\n        //API QUE RETORNA OS DADOS DA SERIE ESPECIFICA\r\n        api.loadSeriesById(this.props.match.params.id)\r\n            .then( (res) => {\r\n                this.setState({ series: res.data }) \r\n                this.refs.name.value = this.state.series.name\r\n                this.refs.status.value = this.state.series.status\r\n                this.refs.genre.value = this.state.series.genre\r\n                this.refs.comments.value = this.state.series.comments\r\n            })\r\n\r\n\r\n        //API QUE RETORNA OS GENEROS\r\n        api.loadGenres()\r\n        .then((res)=>{\r\n          this.setState({\r\n            isLoading: false,\r\n            genres: res.data\r\n          })\r\n        })\r\n    }\r\n\r\n    saveSeries(){\r\n        //construindo um objeto com os dados do formulario\r\n        const newSeries = {\r\n            id: this.props.match.params.id,\r\n            name: this.refs.name.value,\r\n            status: this.refs.status.value,\r\n            genre: this.refs.genre.value,\r\n            comments:this.refs.comments.value\r\n        }\r\n\r\n        //API QUE atualiza\r\n        api.updateSeries(newSeries)\r\n           .then((res)=>{\r\n               this.setState({\r\n                   redirect: '/series/'+this.refs.genre.value\r\n               })\r\n           })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n\r\n            <section className=\"intro-section\">\r\n                \r\n                {\r\n                    this.state.redirect &&\r\n                    <Redirect to={this.state.redirect} />\r\n                }\r\n\r\n                <h1>Editar Série</h1>\r\n\r\n                <form>\r\n                    Nome: <input type=\"text\"  ref=\"name\" className=\"form-control\"/><br />\r\n                    Status: \r\n                    <select ref=\"status\">\r\n                        {Object\r\n                            .keys(statuses)\r\n                            .map( key => <option key={key} value={key}>{statuses[key]}</option> )\r\n                        }\r\n                    </select><br />\r\n                    Gênero: \r\n                    <select ref=\"genre\">\r\n                        {   this.state.genres\r\n                            .map( key => <option key={key} value={key}>{key}</option> )\r\n                        }\r\n                    </select><br />\r\n                    Comentários: <textarea  ref=\"comments\" className=\"form-control\"></textarea><br />\r\n                    <button type=\"button\" onClick={this.saveSeries}>Salvar</button>\r\n                </form>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EditSeries","import React, {Component} from 'react'\r\nimport { BrowserRouter as Router, Route, Link }from 'react-router-dom'\r\n\r\n\r\nimport Home from './components/Home'\r\nimport NewSeries from './components/NewSeries'\r\nimport Series from './components/Series'\r\nimport EditSeries from './components/EditSeries'\r\n\r\nconst About = () => <section className=\"intro-section\"><h1>Sobre</h1></section>\r\n\r\nclass App extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <Router>\r\n        <div>\r\n    \r\n          <nav className=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\r\n            <div className=\"container\">\r\n              <div className=\"navbar-header page-scroll\">\r\n                <a className=\"navbar-brand page-scroll\" href=\"#page-top\">\r\n                    <img src=\"/images/logo.png\" height=\"30\" />\r\n                </a>\r\n              </div>\r\n    \r\n              <div className=\"collapse navbar-collapse navbar-ex1-collapse\">\r\n                <ul className=\"nav navbar-nav\">\r\n                  <li>\r\n                    <Link /*NAVEGA NOS LINKS*/ to='/'>Home</Link>\r\n                  </li>\r\n                  <li>\r\n                      <Link to='/new'>Nova Série</Link>\r\n                  </li>\r\n                  <li>\r\n                    <Link to='/about'>Sobre</Link>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n    \r\n            </div>\r\n          </nav>\r\n          \r\n          \r\n          <Route exact path='/' component={Home} /*ROTA HOME , RETORNA O COMPONENTE HOME*/ />\r\n          <Route path='/series-edit/:id' component={EditSeries} />\r\n          <Route path='/series/:genre' component={Series} /*FILTRANDO A SERIE PELO GENERO */ />\r\n          <Route exact path='/about' component={About} /* RETORNA O COMPONENTE ABOUT */ />\r\n          <Route exact path='/new' component={NewSeries}/>\r\n\r\n        </div> \r\n      </Router>\r\n    ) \r\n  }\r\n  \r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}